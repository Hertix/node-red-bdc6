const fs=require('fs'),path=require('path');const ROOT=path.resolve(__dirname,'..');const INPUT=path.join(__dirname,'input','ALL.csv');const tplJS=fs.readFileSync(path.join(__dirname,'templates','signal.js.hbs'),'utf8');const tplHTML=fs.readFileSync(path.join(__dirname,'templates','signal.html.hbs'),'utf8');function render(t,v){return tpl=>tpl.replace(/\{\{(\w+)\}\}/g,(_,k)=>String(v[k]??''));}const txt=fs.readFileSync(INPUT,'utf8');const rows=txt.split(/\r?\n/).slice(1).filter(Boolean).map(l=>{const p=l.split(';');return{message_name:p[0],signal_name:p[1],can_id_hex:p[2],start_bit:p[3],bit_length:p[4],factor:p[5],offset:p[6],unit:p[7],byte_order:p[8],signed:p[9],min:p[10],max:p[11],default:p[12],category:p[13]}});const out=path.join(ROOT,'nodes');fs.mkdirSync(out,{recursive:true});const mapping={};for(const r of rows){const node_id=(r.message_name+'_'+r.signal_name).replace(/[^a-zA-Z0-9_]/g,'_');const node_label=`${r.message_name}:${r.signal_name}`;const v={...r,node_id,node_label};fs.writeFileSync(path.join(out,node_id+'.js'),tplJS.replace(/\{\{(\w+)\}\}/g,(_,k)=>String(v[k]??'')));fs.writeFileSync(path.join(out,node_id+'.html'),tplHTML.replace(/\{\{(\w+)\}\}/g,(_,k)=>String(v[k]??'')));mapping[node_id]='nodes/'+node_id+'.js';}const pkgPath=path.join(ROOT,'package.json');const pkg=JSON.parse(fs.readFileSync(pkgPath,'utf8'));pkg['node-red']={'nodes':mapping};fs.writeFileSync(pkgPath,JSON.stringify(pkg,null,2));console.log('Generated',rows.length,'per-signal nodes.');