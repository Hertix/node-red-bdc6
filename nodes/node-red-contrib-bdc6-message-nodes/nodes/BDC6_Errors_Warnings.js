// nodes/BDC6_Errors_Warnings.js
module.exports = function(RED) {
  const { toRaw, packBits } = require("../lib/bits.js");
  const SIGNALS = [{"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_xx_Generic", "can_id_hex": "0x320", "start_bit": 56, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for uncategorized warning events. (temporary)"}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_07_CAN", "can_id_hex": "0x320", "start_bit": 38, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for CAN communication."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_06_T30_OoR", "can_id_hex": "0x320", "start_bit": 37, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for LV supply out of acceptable voltage range."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_05_ULS", "can_id_hex": "0x320", "start_bit": 36, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for LS moderate overvoltage events."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_04_UHS", "can_id_hex": "0x320", "start_bit": 35, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for HS moderate overvoltage events"}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_03_OTP_int", "can_id_hex": "0x320", "start_bit": 34, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for internal overtemperature."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Warning_02_OTP_ext", "can_id_hex": "0x320", "start_bit": 33, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Warning flag for external temperature out of range."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_xx_ILS", "can_id_hex": "0x320", "start_bit": 14, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for LS overcurrent events."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_xx_IHS", "can_id_hex": "0x320", "start_bit": 15, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for HS overcurrent events."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_xx_Generic", "can_id_hex": "0x320", "start_bit": 24, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for uncategorized error events. (temporary)"}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_15_Init", "can_id_hex": "0x320", "start_bit": 16, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag to signal initialization errors. Initialization errors can occur due to HW/SW or SW/SW consistency checks."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_14_T15", "can_id_hex": "0x320", "start_bit": 13, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for enable line error. Includes unexpected disable command during operation."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_13_ILoop", "can_id_hex": "0x320", "start_bit": 12, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for unexpected current in the HV- terminals. Can occur in case of undesirable external HV- loop."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_12_Sensors", "can_id_hex": "0x320", "start_bit": 11, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for internal sensor failure."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_11_ControlU", "can_id_hex": "0x320", "start_bit": 10, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for processing unit failure."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_10_LVPS", "can_id_hex": "0x320", "start_bit": 9, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for internal LV power supply error."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_09_ActDisch", "can_id_hex": "0x320", "start_bit": 8, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for active discharge error. Includes unsucessful discharge or hardware faults."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_08_OTP", "can_id_hex": "0x320", "start_bit": 7, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for internal or external overtemperature protection, not functional safety related. Several errors are bundled together."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_07_CAN", "can_id_hex": "0x320", "start_bit": 6, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for CAN interface related errors. Includes transmission and reception faults , message timeout or transceiver faults."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_06_Emergency", "can_id_hex": "0x320", "start_bit": 5, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for crash signal or CAN message detected."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_05_T30_OoR", "can_id_hex": "0x320", "start_bit": 4, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for LV power supply problems. Includes extreme under- and overvoltages or moderate transient timeout."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_04_UHS_ULS", "can_id_hex": "0x320", "start_bit": 3, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for voltage difference between HS and LS negative or too small during operation."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_03_UHS", "can_id_hex": "0x320", "start_bit": 2, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for HS extreme overvoltage events."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_02_ULS", "can_id_hex": "0x320", "start_bit": 1, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for LS extreme overvoltage events."}, {"message_name": "BDC6_Errors_Warnings", "signal_name": "BDC6_Error_01_Request", "can_id_hex": "0x320", "start_bit": 0, "bit_length": 1, "factor": "1", "offset": "0", "unit": "", "byte_order": "intel", "signed": 0, "min": "0", "max": "1", "default": "0", "category": "BDC6*", "multiplex": "-", "comment": "Error flag for invalid external request. External invalid request includes invalid state, control mode or value request."}];
  function Node(config) {
    RED.nodes.createNode(this, config);
    const node = this;
    const can_id_hex = "0x320";
    const message_name = "BDC6_Errors_Warnings";
    const map = new Map();
    for (const s of SIGNALS) map.set(s.signal_name, s);
    node.on("input", function(msg) {
      try {
        const payload = msg && msg.payload && typeof msg.payload === "object" ? msg.payload : {};
        let raw = 0n;
        for (const [k,v] of Object.entries(payload)) {
          if (!map.has(k)) continue;
          const s = map.get(k);
          const rawVal = toRaw(Number(v), Number(s.factor||1), Number(s.offset||0), !!s.signed,
                               (s.min!==""?Number(s.min):null), (s.max!==""?Number(s.max):null));
          const {mask, valueBits} = packBits(rawVal, Number(s.start_bit), Number(s.bit_length), String(s.byte_order||'intel'), !!s.signed);
          raw = (raw & (~mask)) | (valueBits & mask);
        }
        const out = {
          type: "BDC6_MESSAGE_UPDATE",
          message: message_name,
          can_id: Number(can_id_hex),
          raw_data_hex: "0x" + raw.toString(16),
          interval_ms: payload.interval_ms,
          cyclic: payload.cyclic,
          immediate: payload.immediate
        };
        node.send({ topic: message_name, payload: out });
      } catch(err) { node.error(err); }
    });
  }
  RED.nodes.registerType("BDC6_Errors_Warnings", Node, {
    category: "BDC6*",
    defaults: { name: { value: "BDC6_Errors_Warnings (CAN 0x320)" } },
    inputs:1, outputs:1, icon:"node-red/message.png", color:"#e8f0ff",
    paletteLabel: "BDC6_Errors_Warnings",
    label: function(){ return this.name || "BDC6_Errors_Warnings (CAN 0x320)"; }
  });
}
